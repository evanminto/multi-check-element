{"mappings":"A,C,KGKe,MAAA,UAAgC,YAE7C,CAAC,CAAQ,CAAG,EAAE,AAAC,AAEf,QAAO,mBAAqB,CAAC,WAAW,AAAC,AAOzC,CAAA,yBAAyB,CAAI,CAAE,CAAS,CAAE,CAAQ,CAAE,CACrC,aAAT,IACF,IAAI,CAAC,CAAC,CAAQ,CAAI,AAAA,CAAA,GAAY,EAAA,EAAI,KAAK,CAAC,OACxC,IAAI,CAAC,CAAC,CAAc,GAExB,CAGA,IAAI,UAAW,CACb,OAAO,IAAI,CAAC,CAAC,CAAQ,AACvB,CAGA,IAAI,SAAS,CAAK,CAAE,CAClB,GAAI,CAAE,CAAA,aAAiB,KAAA,EACrB,MAAM,AAAI,UAAU,yBAGtB,CAAA,IAAI,CAAC,CAAC,CAAQ,CAAG,EAAM,GAAG,CAAC,AAAA,GAAK,EAAE,QAAQ,IAE1C,IAAI,CAAC,YAAY,CACf,gBACA,IAAI,CAAC,CAAC,CAAQ,CAAC,IAAI,CAAC,KAExB,CAEA,mBAAoB,CAClB,IAAI,CAAC,gBAAgB,CAAC,SAAU,IAAI,EACpC,SAAS,IAAI,CAAC,gBAAgB,CAAC,SAAU,IAAI,CAC/C,CAEA,sBAAuB,CACrB,IAAI,CAAC,mBAAmB,CAAC,SAAU,IAAI,EACvC,SAAS,IAAI,CAAC,mBAAmB,CAAC,SAAU,IAAI,CAClD,CAMA,YAAY,CAAK,CAAE,CACjB,GACE,AAAe,WAAf,EAAM,IAAI,EACR,EAAM,MAAM,YAAY,kBACzB,EAAM,MAAM,CAAC,OAAO,CAAC,2BAKxB,GAAI,IAAI,CAAC,QAAQ,CAAC,EAAM,MAAM,EAAG,CAC/B,IAAM,EACJ,IAAI,SAAS,gBAAgB,CAC3B,IAAI,CAAC,CAAC,CAAQ,CAAC,GAAG,CAAC,AAAA,GAAM,CAAC,CAAC,EAAE,EAAG,CAAC,EAAE,IAAI,CAAC,OACxC,CAAC,MAAM,CAAC,AAAA,GAAM,aAAc,kBAG1B,EAAe,EAAM,MAAM,CAAC,OAAO,CACzC,EAAW,OAAO,CAAC,AAAA,GAAM,EAAG,OAAO,CAAG,EACxC,MAAW,IAAI,CAAC,CAAC,CAAQ,CAAC,QAAQ,CAAC,EAAM,MAAM,CAAC,EAAE,GAChD,IAAI,CAAC,CAAC,CAAc,GAExB,CAGA,CAAC,CAAc,GACb,IAAM,EACJ,IAAI,SAAS,gBAAgB,CAC3B,IAAI,CAAC,CAAC,CAAQ,CAAC,GAAG,CAAC,AAAA,GAAM,CAAC,CAAC,EAAE,EAAG,CAAC,EAAE,IAAI,CAAC,OACxC,CAAC,MAAM,CAAC,AAAA,GAAM,aAAc,kBAI1B,EAAgB,IAAI,CAAC,aAAa,CAAC,0BAEzC,GAAI,EAAe,CACjB,EAAc,YAAY,CAAC,gBAAiB,IAAI,CAAC,CAAC,CAAQ,CAAC,IAAI,CAAC,MAChE,IAAM,EAAkB,EAAW,MAAM,CACnC,EAAe,EAAW,MAAM,CAAC,AAAA,GAAM,EAAG,OAAO,EAAE,MAAM,AAE3D,CAAA,IAAiB,GACf,EAAc,aAAa,EAC7B,CAAA,EAAc,OAAO,CAAG,CAAA,CAD1B,EAGA,EAAc,aAAa,CAAG,CAAA,GACrB,AAAiB,IAAjB,GACT,EAAc,OAAO,CAAG,CAAA,EACxB,EAAc,aAAa,CAAG,CAAA,GACrB,EAAc,OAAO,EAC9B,CAAA,EAAc,aAAa,CAAG,CAAA,CADhC,CAGF,CACF,CACF,CF1GA,ACIe,CAAA,CAAC,EAAO,aAAa,IAC9B,mBAAoB,QACtB,eAAe,MAAM,CAAC,EAAM,EAEhC,CAAA,G,C","sources":["<anon>","src/global.js","src/index.js","src/MultiCheckElement.js"],"sourcesContent":["(() => {\n/**\n * @customElement multi-check\n * @attr controls Space-separated list of IDs for checkboxes controlled by the\n * child checkbox\n */ class $527f1ed353ce9381$export$2e2bcd8739ae039 extends HTMLElement {\n    /** @type {string[]} */ #controls = [];\n    static observedAttributes = [\n        \"controls\"\n    ];\n    /**\n   * @param {string} name \n   * @param {string | undefined} _oldValue \n   * @param {string | undefined} newValue \n   */ attributeChangedCallback(name, _oldValue, newValue) {\n        if (name === \"controls\") {\n            this.#controls = (newValue || \"\").split(/\\s+/);\n            this.#updateCheckbox();\n        }\n    }\n    /** @returns {string[]} */ get controls() {\n        return this.#controls;\n    }\n    /** @param {string[]} value */ set controls(value) {\n        if (!(value instanceof Array)) throw new TypeError(\"value must be an array\");\n        this.#controls = value.map((v)=>v.toString());\n        this.setAttribute(\"aria-controls\", this.#controls.join(\" \"));\n    }\n    connectedCallback() {\n        this.addEventListener(\"change\", this);\n        document.body.addEventListener(\"change\", this);\n    }\n    disconnectedCallback() {\n        this.removeEventListener(\"change\", this);\n        document.body.removeEventListener(\"change\", this);\n    }\n    /**\n   * @param {Event} event\n   * @returns {void}\n   */ handleEvent(event) {\n        if (event.type !== \"change\" || !(event.target instanceof HTMLInputElement) || !event.target.matches('input[type=\"checkbox\"]')) return;\n        if (this.contains(event.target)) {\n            const checkboxes = /** @type {HTMLInputElement[]} */ [\n                ...document.querySelectorAll(this.#controls.map((id)=>`#${id}`).join(\", \"))\n            ].filter((el)=>el instanceof HTMLInputElement);\n            const childChecked = event.target.checked;\n            checkboxes.forEach((el)=>el.checked = childChecked);\n        } else if (this.#controls.includes(event.target.id)) this.#updateCheckbox();\n    }\n    /** @returns {void} */ #updateCheckbox() {\n        const controlled = /** @type {HTMLInputElement[]} */ [\n            ...document.querySelectorAll(this.#controls.map((id)=>`#${id}`).join(\", \"))\n        ].filter((el)=>el instanceof HTMLInputElement);\n        /** @type {HTMLInputElement | null} */ const childCheckbox = this.querySelector('input[type=\"checkbox\"]');\n        if (childCheckbox) {\n            childCheckbox.setAttribute(\"aria-controls\", this.#controls.join(\" \"));\n            const controlledCount = controlled.length;\n            const checkedCount = controlled.filter((el)=>el.checked).length;\n            if (checkedCount === controlledCount) {\n                if (childCheckbox.indeterminate) childCheckbox.checked = true;\n                childCheckbox.indeterminate = false;\n            } else if (checkedCount === 0) {\n                childCheckbox.checked = false;\n                childCheckbox.indeterminate = false;\n            } else if (childCheckbox.checked) childCheckbox.indeterminate = true;\n        }\n    }\n}\n\n\n/**\n * @param {string} [name]\n * @returns {void}\n */ const $f9ccc1fa0d22629a$export$f36d6a7a5c09a23e = (name = \"multi-check\")=>{\n    if (\"customElements\" in window) customElements.define(name, (0, $527f1ed353ce9381$export$2e2bcd8739ae039));\n};\n\n\n(0, $f9ccc1fa0d22629a$export$f36d6a7a5c09a23e)();\n\n})();\n//# sourceMappingURL=global.js.map\n","import { define } from './index.js';\n\ndefine();\n","import MultiCheckElement from './MultiCheckElement.js';\n\n/**\n * @param {string} [name]\n * @returns {void}\n */\nconst define = (name = 'multi-check') => {\n  if ('customElements' in window) {\n    customElements.define(name, MultiCheckElement);\n  }\n};\n\nexport { MultiCheckElement, define };\n","/**\n * @customElement multi-check\n * @attr controls Space-separated list of IDs for checkboxes controlled by the\n * child checkbox\n */\nexport default class MultiCheckElement extends HTMLElement {\n  /** @type {string[]} */\n  #controls = [];\n\n  static observedAttributes = ['controls'];\n  \n  /**\n   * @param {string} name \n   * @param {string | undefined} _oldValue \n   * @param {string | undefined} newValue \n   */\n  attributeChangedCallback(name, _oldValue, newValue) {\n    if (name === 'controls') {\n      this.#controls = (newValue || '').split(/\\s+/);\n      this.#updateCheckbox();\n    }\n  }\n  \n  /** @returns {string[]} */\n  get controls() {\n    return this.#controls;\n  }\n  \n  /** @param {string[]} value */\n  set controls(value) {\n    if (!(value instanceof Array)) {\n      throw new TypeError('value must be an array');\n    }\n\n    this.#controls = value.map(v => v.toString());\n\n    this.setAttribute(\n      'aria-controls',\n      this.#controls.join(' ')\n    );\n  }\n  \n  connectedCallback() {\n    this.addEventListener('change', this);\n    document.body.addEventListener('change', this);\n  }\n  \n  disconnectedCallback() {\n    this.removeEventListener('change', this);\n    document.body.removeEventListener('change', this);\n  }\n  \n  /**\n   * @param {Event} event\n   * @returns {void}\n   */\n  handleEvent(event) {\n    if (\n      event.type !== 'change' ||\n      !(event.target instanceof HTMLInputElement) ||\n      !event.target.matches('input[type=\"checkbox\"]')\n    ) {\n      return;\n    }\n\n    if (this.contains(event.target)) {\n      const checkboxes = /** @type {HTMLInputElement[]} */ (\n        [...document.querySelectorAll(\n          this.#controls.map(id => `#${id}`).join(', ')\n        )].filter(el => el instanceof HTMLInputElement)\n      );\n\n      const childChecked = event.target.checked;\n      checkboxes.forEach(el => el.checked = childChecked);\n    } else if (this.#controls.includes(event.target.id)) {\n      this.#updateCheckbox();\n    }\n  }\n  \n  /** @returns {void} */\n  #updateCheckbox() {\n    const controlled = /** @type {HTMLInputElement[]} */ (\n      [...document.querySelectorAll(\n        this.#controls.map(id => `#${id}`).join(', ')\n      )].filter(el => el instanceof HTMLInputElement)\n    );\n    \n    /** @type {HTMLInputElement | null} */\n    const childCheckbox = this.querySelector('input[type=\"checkbox\"]');\n\n    if (childCheckbox) {\n      childCheckbox.setAttribute('aria-controls', this.#controls.join(' '));\n      const controlledCount = controlled.length;\n      const checkedCount = controlled.filter(el => el.checked).length;\n      \n      if (checkedCount === controlledCount) {\n        if (childCheckbox.indeterminate) {\n          childCheckbox.checked = true;\n        }\n        childCheckbox.indeterminate = false;\n      } else if (checkedCount === 0) {\n        childCheckbox.checked = false;\n        childCheckbox.indeterminate = false;\n      } else if (childCheckbox.checked) {\n        childCheckbox.indeterminate = true;\n      }\n    }\n  }\n}\n"],"names":["$527f1ed353ce9381$export$2e2bcd8739ae039","HTMLElement","controls","observedAttributes","attributeChangedCallback","name","_oldValue","newValue","split","updateCheckbox","value","Array","TypeError","map","v","toString","setAttribute","join","connectedCallback","addEventListener","document","body","disconnectedCallback","removeEventListener","handleEvent","event","type","target","HTMLInputElement","matches","contains","checkboxes","querySelectorAll","id","filter","el","childChecked","checked","forEach","includes","controlled","childCheckbox","querySelector","controlledCount","length","checkedCount","indeterminate","window","customElements","define"],"version":3,"file":"global.js.map"}